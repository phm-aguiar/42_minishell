1. Leitura e Exibição de Comandos Simples
Objetivo: Ler comandos simples e exibi-los na tela.
Funções Relevantes: readline, printf.
Dificuldade: Fácil.
2. Tokenização Básica
Objetivo: Tokenizar os comandos em partes básicas.
Funções Relevantes: strtok.
Dificuldade: Fácil.
3. Execução de Comandos Simples
Objetivo: Executar comandos simples (sem pipes ou redirecionamento).
Funções Relevantes: fork, execve.
Dificuldade: Fácil/Médio.
4. Manipulação de Variáveis de Ambiente
Objetivo: Implementar a expansão de variáveis de ambiente (ex: $PATH).
Funções Relevantes: getenv.
Dificuldade: Médio.
5. Manipulação de Redirecionamento
Objetivo: Suportar redirecionamento básico (entrada e saída).
Funções Relevantes: open, close, dup2.
Dificuldade: Médio.
6. Histórico de Comandos
Objetivo: Implementar um histórico simples de comandos.
Funções Relevantes: readline para entrada e add_history para armazenamento.
Dificuldade: Médio.
7. Execução de Comandos com Pipes
Objetivo: Suportar execução de comandos encadeados por pipes.
Funções Relevantes: pipe.
Dificuldade: Médio/Avançado.
8. Manipulação de Sinais
Objetivo: Lidar com sinais como Ctrl+C.
Funções Relevantes: signal.
Dificuldade: Médio/Avançado.
9. Expansão de Comandos
Objetivo: Implementar a expansão de comandos (substituição de processos).
Funções Relevantes: fork, execve.
Dificuldade: Avançado.
10. Edição de Linha Avançada
Objetivo: Melhorar a edição de linha usando bibliotecas como readline.
Funções Relevantes: readline.
Dificuldade: Avançado.
11. Tratamento Avançado de Erros
Objetivo: Melhorar a gestão de erros e mensagens de erro.
Funções Relevantes: perror, strerror.
Dificuldade: Avançado.
12. Melhorias de Usabilidade
Objetivo: Adicionar recursos extras para melhorar a experiência do usuário.
Funções Relevantes: Depende dos recursos escolhidos (completar tab, cores, etc.).
Dificuldade: Avançado.